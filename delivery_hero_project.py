# -*- coding: utf-8 -*-
"""Delivery Hero project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1suMZHg5FUVrgXHq-XH51eCuFCauA6WSQ
"""

# Step 1: Import Required Libraries
import pandas as pd
import numpy as np
# from datetime import datetime # Not needed for this dataset's time columns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
# from haversine import haversine # Not needed for this dataset's features
import joblib

# Step 2: Load Dataset
# Load the dataset that was processed in the previous successful cell
df = pd.read_csv('/content/simulated_delivery_data_1000.csv')

# Step 3: Data Cleaning & Feature Engineering
# The previous successful cell already performed necessary cleaning and feature engineering
# on this specific dataset (simulated_delivery_data_1000.csv).
# We should align the feature list with what was used successfully before.
# The previous cell calculated 'order_hour' and 'delivery_duration_mins'.

# Ensure the correct target column name is used, based on the previous cell
target = 'delivery_duration_mins'

# Define features based on the columns available in the df from the previous cell's processing
# and what was used in the successful model training.
# Based on ipython-input-8-841101b8ba29, the columns in df are
# ['pickup_lat', 'pickup_lng', 'dropoff_lat', 'dropoff_lng', 'order_hour', 'delivery_duration_mins']
# and the features used were ['order_hour', 'pickup_lat', 'pickup_lng', 'dropoff_lat', 'dropoff_lng'].
features = ['order_hour', 'pickup_lat', 'pickup_lng', 'dropoff_lat', 'dropoff_lng']


# Step 4: Train-Test Split
X = df[features]
y = df[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Model Training
from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 6: Evaluation
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae:.2f} mins")
print(f"RMSE: {rmse:.2f} mins")
print(f"R2 Score: {r2:.2f}")
# Print columns to verify
print(df.columns.tolist())


# Step 7: Save the Model
# Saving with a slightly different name to differentiate from the other dataset's model
joblib.dump(model, 'delivery_time_model_simulated.pkl')